// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  username   String?  @unique
  bio        String?
  skills     String[]
  interests  String[]
  devpost  String?
github   String?
linkedin String?
website  String?
  createdAt  DateTime @default(now())
  
  // Relationships
  hackathons HackathonParticipant[]
}

model Hackathon {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        String
  endDate     String
  location    String
  status      String   // "Open for Registration", "Registration Closed", "In Progress", "Completed"
  theme       String
  maxParticipants Int
  prizes      String[]
  rules       String
  organizers  String[]
  sponsors    String[]
  createdAt   DateTime @default(now())
  
  // Relationships
  participants HackathonParticipant[]
}

model HackathonParticipant {
  id          Int       @id @default(autoincrement())
  userId      Int
  hackathonId Int
  joinedAt    DateTime  @default(now())
  
  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, hackathonId])
}

